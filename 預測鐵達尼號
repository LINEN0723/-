# -#鐵達尼號
import pandas as pd
train_df=pd.read_csv("train.csv",encoding="utf-8")
#print(train_df)
test_df=pd.read_csv("test.csv",encoding="utf-8")
#print(test_df)
#print(test_df.isna().sum())
t_med=train_df.median()
#print(t_med)
train_df=train_df.fillna(t_med)
#print(train_df.info())#數值類型的填中位數
#print(train_df)
test_df=test_df.fillna(t_med)
#print(test_df.info())#數值類型的填中位數
#print(test_df)
#print(train_df["Embarked"].value_counts())
#print(train_df["Embarked"].value_counts().idxmax())#取最大值
#print(test_df["Embarked"].value_counts())
#print(test_df["Embarked"].value_counts().idxmax())#取最大值
s="Wilkes, Mrs. James (Ellen Needs)"
#print(s.split(",")[-1].split(".")[0].strip())#抓,後面因為是-1
def namechg(s):
    s=s.split(",")[-1].split(".")[0].strip()
    return s
#print(train_df['Name'].apply(namechg))
#print(train_df['Name'].apply(namechg).value_counts)
def namechg(s):
    keep=["Mr","Miss","Mrs","Master"]
    s=s.split(",")[-1].split(".")[0].strip()
    if s in keep:
        return s
    else:
        return None
#print(train_df["Name"].apply(namechg))
train_df["Name"]=train_df["Name"].apply(namechg)
#print(train_df)
test_df["Name"]=test_df["Name"].apply(namechg)
#print(test_df)
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
train_df['Sex']=le.fit_transform(train_df['Sex'])
#print(train_df)
test_df['Sex']=le.fit_transform(test_df['Sex'])
#print(test_df)
#print(pd.get_dummies(train_df,columns=["Name","Embarked"]))
train=pd.get_dummies(train_df,columns=["Name","Embarked"])
#print(train)
#print(train.columns)
test=pd.get_dummies(test_df,columns=["Name","Embarked"])
#print(test)
train=train.drop(["PassengerId","Ticket","Cabin"],axis=1)#砍掉不要的
test=test.drop(["Ticket","Cabin"],axis=1)#砍掉不要的
#print(train)
x_train=train.drop(['Survived'],axis=1)                     
#print(x_train)
x_train=train.drop("Survived",axis=1)
#print(x_train)                 
y_train=train["Survived"]
#print(y_train)
x_predict=test.drop("PassengerId",axis=1)
#print(x_predict)
pid=test["PassengerId"]
#print(pid)
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
import numpy as np
#cross_val_score試算分數的                                                                                                                                                                                                                                                                                       
rfc=RandomForestClassifier(n_estimators=33,max_depth=8)
scores=cross_val_score(rfc,x_train,y_train,cv=10,n_jobs=4)#cv是樹
#print("個別分數: ",scores)
#print("平均分數: ",np.average(scores))
'''
from sklearn.model_selection import GridSearchCV
#GridSearchCV是一次跑好幾次
rfc = RandomForestClassifier()
params={'n_estimators':range(10,100),"max_depth":range(0,100)}
gscv =GridSearchCV(rfc,params,cv=10,n_jobs=4)
gscv.fit(x_train,y_train)
print("最佳分數: ",gscv.best_score_)
print("最佳參數: ",gscv.best_params_)
'''
rfc=RandomForestClassifier(n_estimators=33,max_depth=8)
rfc.fit(x_train,y_train)
pre=rfc.predict(x_predict)
result=pd.DataFrame({"PassengerId":pid,"Survived":pre})

result.to_csv("titanic.csv",encoding="utf-8",index=False)
print(result)
